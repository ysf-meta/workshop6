AWSTemplateFormatVersion: 2010-09-09
Description: workshop6 get all buckets with api gateway

Resources:

  lambdaIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole 
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      RoleName: lambdaRolew6

  lambdaFunction:
    DependsOn: lambdaIamRole
    Type: AWS::Lambda::Function
    Properties:
      Description: "get all buckets"
      FunctionName: get-buckets
      Handler: index.lambda_handler 
      MemorySize: 128
      Role: !GetAtt lambdaIamRole.Arn
      Runtime: python3.11 
      Timeout: 30
      Code: 
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              client = boto3.client('s3')
              bucketlist = []
              allbuckets = client.list_buckets()["Buckets"]
              for bucket in allbuckets:
                  bucketName=bucket["Name"]
                  allobject=[]
                  my_objects=client.list_objects_v2(Bucket=bucketName)
                  try:
                      for object1 in my_objects["Contents"]:
                          response = client.get_object(Bucket=bucketName, Key=object1["Key"])["Body"].read().decode('utf-8')
                          allobject.append({'Name':object1["Key"],'Content':response})
                      bucketlist.append({'BucketName':bucketName,'Objects':allobject})
                  except Exception  as e:
                      bucketlist.append({'BucketName':bucketName,'Objects':[]})
                      continue
                  
              data={}
              data['statusCode'] = 200
              data['headers'] = {
                        "Content-Type": "application/json",
                        "Access-Control-Allow-Origin": "*",
                        "Access-Control-Allow-Headers": "Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token",
                        "Access-Control-Allow-Methods": "OPTIONS,GET"
                    }
              data['body'] = json.dumps(bucketlist)
              
              
              return data
  allbucketsAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BucketsApi

  allbucketsAPIRes:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref allbucketsAPI
      ParentId: !GetAtt allbucketsAPI.RootResourceId
      PathPart: allbucks
      

  bucketsGetMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref allbucketsAPI
      ResourceId: !GetAtt allbucketsAPIRes.ResourceId
      HttpMethod: GET
      MethodResponses: 
        - StatusCode: 200
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations
    
  Deployment:
    DependsOn: bucketsGetMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref allbucketsAPI
      Description: My deployment
      StageName: Stage1

  LambdainvokPer:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt  lambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: 086041644501


      